openapi: 3.0.3
info:
  title: TodoList
  description: "Simple TodoList App created with the help of Swagger Editor"
  contact:
    email: veronicaxlcw@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://todolist.swagger.io/api/v3
tags:
  - name: todos
    description: Operations about the Todo List
  - name: user
    description: Operations about user
paths:
  /todos/create:
    post:
      tags:
        - todos
      summary: Create a new todo list under the userId
      operationId: createTodos
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '405':
          description: Invalid user
 
  /todos/add:
    put:
      tags:
        - todos
      summary: Add a new todo to the todo list
      operationId: addTodo
      parameters:
        - name: name
          in: query
          description: name of the todo to be deleted
          required: true
          schema:
            type: string
            format: int64
        - name: description
          in: query
          description: description of the todo to be deleted
          required: true
          schema:
            type: string
            format: int64 
        - name: dueDate
          in: query
          description: duedate of the todo to be deleted
          required: true
          schema:
            type: integer
            format: int64 
        - name: status
          in: query
          description: status of the todo to be deleted
          required: true
          schema:
            type: integer
            format: int64 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'          
        '405':
          description: Invalid input
  /todos/delete:
    delete:
      tags:
        - todos
      summary: Deletes a todo
      operationId: removeTodo
      parameters:
        - name: name
          in: query
          description: name of the todo to be deleted
          required: true
          schema:
            type: string
            format: int64
        - name: description
          in: query
          description: description of the todo to be deleted
          required: true
          schema:
            type: string
            format: int64 
        - name: dueDate
          in: query
          description: duedate of the todo to be deleted
          required: true
          schema:
            type: integer
            format: int64 
        - name: status
          in: query
          description: status of the todo to be deleted
          required: true
          schema:
            type: integer
            format: int64 
      responses:
        '400':
          description: Invalid todo entry
  /todos/filter:
    get:
      tags:
        - todos
      summary: Filter the todos by due date
      description: Filter the todos by the due date inputted
      operationId: filter
      parameters:
        - name: duedate
          in: query
          description: due date that needs to be considered for filter
          required: true
          explode: true
          schema:
            type: integer
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'          
        '400':
          description: Invalid status value
  /todos/sort:
    get:
      tags:
        - todos
      summary: Sort the todo list by due date
      operationId: sort
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'          
  # /user:
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     requestBody:
  #       description: Created user object
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  # /user/createWithList:
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: Creates list of users with given input array
  #     operationId: createUsersWithListInput
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             type: array
  #             items:
  #               $ref: '#/components/schemas/User'
  #     responses:
  #       '200':
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #       default:
  #         description: successful operation
  # /user/login:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ''
  #     operationId: loginUser
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/xml:
  #             schema:
  #               type: string
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied
  # /user/logout:
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ''
  #     operationId: logoutUser
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # /user/{username}:
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     operationId: getUserByName
  #     parameters:
  #       - name: username
  #         in: path
  #         description: 'The name that needs to be fetched. Use user1 for testing. '
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'          
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Update user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     requestBody:
  #       description: Update an existent user in the store
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #     responses:
  #       default:
  #         description: successful operation
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       '400':
  #         description: Invalid username supplied
  #       '404':
  #         description: User not found
components:
  schemas:
    # User:
    #   type: object
    #   properties:
    #     id:
    #       type: integer
    #       format: int64
    #       example: 10
    #     username:
    #       type: string
    #       example: theUser
    #     firstName:
    #       type: string
    #       example: John
    #     lastName:
    #       type: string
    #       example: James
    #     email:
    #       type: string
    #       example: john@email.com
    #     password:
    #       type: string
    #       example: '12345'
    #   xml:
    #     name: user
    Todo:
      required:
        - name
        - description
        - dueDate
        - status
      type: object
      properties:
        name:
          type: string
          example: "Test"
        description:
          type: string
          example: "Math Test"
        dueDate:
          type: integer
          format: int64
          example: 20230211
        status:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          example: 50
  requestBodies:
    Todo:
      description: Todo object that needs to be added to the todos
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Todo'
    # UserArray:
    #   description: List of user object
    #   content:
    #     application/json:
    #       schema:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/User'
    TodoArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Todo'